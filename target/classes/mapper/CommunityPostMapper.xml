<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.ApiRound.mapper.CommunityPostMapper">

    <resultMap id="PostMap" type="com.example.ApiRound.dto.CommunityPostDto">
        <result property="postId"     column="post_id"/>
        <result property="userId"     column="user_id"/>
        <result property="authorName" column="author_name"/>
        <result property="title"      column="title"/>
        <result property="content"    column="content"/>
        <result property="createAt"   column="create_at"/>
        <result property="likeCount"  column="like_count"/>
        <result property="category"   column="category"/>
        <result property="isDeleted"  column="is_deleted"/>
        <result property="isUpdate"   column="is_update"/>
    </resultMap>

    <!-- 목록 -->
    <select id="findAllPosts" resultMap="PostMap">
        select
        p.post_id,
        p.user_id,
        p.title,
        p.content,
        p.category,
        p.create_at,
        p.like_count,
        p.is_deleted,
        p.is_update,
        u.name as author_name
        from community_post p
        left join social_user u on p.user_id = u.user_id
        where p.is_deleted = 'N'
        order by p.create_at desc
    </select>

    <!-- 단건 조회 -->
    <select id="findPostbyId" parameterType="int" resultMap="PostMap">
        select
        p.post_id,
        p.user_id,
        p.title,
        p.content,
        p.category,
        p.create_at,
        p.like_count,
        p.is_deleted,
        p.is_update,
        u.name as author_name
        from community_post p
        left join social_user u on p.user_id = u.user_id
        where p.post_id = #{postId}
        and p.is_deleted = 'N'
    </select>

    <!-- 작성: post_id 는 트리거/auto inc 가 채움 -->
    <insert id="insertPost" parameterType="com.example.ApiRound.dto.CommunityPostDto">
        insert into community_post
        (user_id, title, content, category, is_deleted, create_at)
        values
        (#{userId}, #{title}, #{content}, #{category}, 'N', now())
    </insert>

    <!-- 수정 -->
    <update id="updatePost" parameterType="com.example.ApiRound.dto.CommunityPostDto">
        update community_post
        set title = #{title},
        content = #{content},
        is_update = 'Y'
        where post_id = #{postId}
        and is_deleted = 'N'
    </update>

    <!-- 소프트 삭제 -->
    <update id="softDeletePost" parameterType="int">
        update community_post
        set is_deleted = 'Y'
        where post_id = #{postId}
        and is_deleted = 'N'
    </update>

    <!-- 좋아요 +1 -->
    <update id="incrementLikeCount" parameterType="int">
        update community_post
        set like_count = ifnull(like_count, 0) + 1
        where post_id = #{postId}
        and is_deleted = 'N'
    </update>

    <!-- 좋아요 -1 (0 미만 방지) -->
    <update id="decrementLikeCount" parameterType="int">
        update community_post
        set like_count = case when ifnull(like_count, 0) > 0 then like_count - 1 else 0 end
        where post_id = #{postId}
        and is_deleted = 'N'
    </update>

    <!-- 현재 좋아요 카운트 -->
    <select id="getLikeCount" parameterType="int" resultType="int">
        select ifnull(like_count, 0)
        from community_post
        where post_id = #{postId}
        and is_deleted = 'N'
    </select>

    <!-- (임시) 해당 글을 그 유저가 쓴 건지 확인 -->
    <select id="hasUserLiked" resultType="int">
        select count(1)
        from community_post
        where post_id = #{postId}
        and user_id = #{userId}
    </select>

</mapper>
